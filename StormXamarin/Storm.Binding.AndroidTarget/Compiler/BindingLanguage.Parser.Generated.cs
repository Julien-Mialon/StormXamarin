// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  SURFACE-JULIEN
// DateTime: 26/02/2015 15:20:45
// UserName: Julian
// Input file <C:\Users\Julian\Source\Repos\StormXamarin\StormXamarin\Storm.Binding.AndroidTarget\\Compiler\BindingLanguage.Language.grammar.y - 26/02/2015 15:20:42>

// options: no-lines gplex

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Globalization;
using QUT.Gppg;

namespace Storm.Binding.AndroidTarget.Compiler
{
internal enum Token {error=2,EOF=3,OPEN_BRACKET=4,CLOSE_BRACKET=5,COMMA=6,
    EQUAL=7,BINDING=8,RESOURCE=9,TRANSLATION=10,IDENTIFIER=11};

internal partial struct ValueType
{ 
	public string Content; 
	public Expression Expression;
	public ExpressionType ExpressionType;
	public List<Tuple<string, Expression>> KeyValueList;
}
// Abstract base class for GPLEX scanners
[GeneratedCode( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCode( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCode( "Gardens Point Parser Generator", "1.5.2")]
internal partial class BindingLanguageParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[14];
  private static State[] states = new State[22];
  private static string[] nonTerms = new string[] {
      "expression", "$accept", "expressionKeyword", "expressionContent", "values", 
      "dualContent", };

  static BindingLanguageParser() {
    states[0] = new State(new int[]{4,3},new int[]{-1,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{8,19,9,20,10,21},new int[]{-3,4});
    states[4] = new State(new int[]{11,17,4,3,5,-6},new int[]{-4,5,-5,7,-1,16,-6,18});
    states[5] = new State(new int[]{5,6});
    states[6] = new State(-2);
    states[7] = new State(new int[]{6,8,5,-7});
    states[8] = new State(new int[]{11,10},new int[]{-6,9});
    states[9] = new State(-8);
    states[10] = new State(new int[]{7,11});
    states[11] = new State(new int[]{11,15,4,3},new int[]{-5,12,-1,16});
    states[12] = new State(new int[]{6,13,5,-10});
    states[13] = new State(new int[]{11,10},new int[]{-6,14});
    states[14] = new State(-11);
    states[15] = new State(-12);
    states[16] = new State(-13);
    states[17] = new State(new int[]{7,11,6,-12,5,-12});
    states[18] = new State(-9);
    states[19] = new State(-3);
    states[20] = new State(-4);
    states[21] = new State(-5);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{4,-3,-4,5});
    rules[3] = new Rule(-3, new int[]{8});
    rules[4] = new Rule(-3, new int[]{9});
    rules[5] = new Rule(-3, new int[]{10});
    rules[6] = new Rule(-4, new int[]{});
    rules[7] = new Rule(-4, new int[]{-5});
    rules[8] = new Rule(-4, new int[]{-5,6,-6});
    rules[9] = new Rule(-4, new int[]{-6});
    rules[10] = new Rule(-6, new int[]{11,7,-5});
    rules[11] = new Rule(-6, new int[]{11,7,-5,6,-6});
    rules[12] = new Rule(-5, new int[]{11});
    rules[13] = new Rule(-5, new int[]{-1});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // expression -> OPEN_BRACKET, expressionKeyword, expressionContent, CLOSE_BRACKET
{ CurrentSemanticValue.Expression = ExpressionFactory.CreateExpression(ValueStack[ValueStack.Depth-3].ExpressionType, ValueStack[ValueStack.Depth-2].KeyValueList); }
        break;
      case 3: // expressionKeyword -> BINDING
{ CurrentSemanticValue.ExpressionType = ExpressionType.Binding; }
        break;
      case 4: // expressionKeyword -> RESOURCE
{ CurrentSemanticValue.ExpressionType = ExpressionType.Resource; }
        break;
      case 5: // expressionKeyword -> TRANSLATION
{ CurrentSemanticValue.ExpressionType = ExpressionType.Translation; }
        break;
      case 7: // expressionContent -> values
{ CurrentSemanticValue.KeyValueList = CreateAndAdd(null, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 8: // expressionContent -> values, COMMA, dualContent
{ CurrentSemanticValue.KeyValueList = CreateAndAdd(null, ValueStack[ValueStack.Depth-3].Expression); CopyList(ValueStack[ValueStack.Depth-1], CurrentSemanticValue); }
        break;
      case 9: // expressionContent -> dualContent
{ CopyList(ValueStack[ValueStack.Depth-1], CurrentSemanticValue); }
        break;
      case 10: // dualContent -> IDENTIFIER, EQUAL, values
{ CurrentSemanticValue.KeyValueList = CreateAndAdd(ValueStack[ValueStack.Depth-3].Content, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 11: // dualContent -> IDENTIFIER, EQUAL, values, COMMA, dualContent
{ CurrentSemanticValue.KeyValueList = CreateAndAdd(ValueStack[ValueStack.Depth-5].Content, ValueStack[ValueStack.Depth-3].Expression); CopyList(ValueStack[ValueStack.Depth-1], CurrentSemanticValue); }
        break;
      case 12: // values -> IDENTIFIER
{ CurrentSemanticValue.Expression = ExpressionFactory.CreateTextExpression(ValueStack[ValueStack.Depth-1].Content); }
        break;
      case 13: // values -> expression
{ CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression; }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
