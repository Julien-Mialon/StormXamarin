using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;
using Storm.MvvmCross.Android.Target.Configuration.Model;
using Storm.MvvmCross.Android.Target.Helper;

namespace Storm.MvvmCross.Android.Target.CodeGenerator
{
	public abstract class AbstractClassGenerator
	{
		public string ClassName { get; set; }

		public string NamespaceName { get; set; }
		
		public bool IsPartialClass { get; set; }

		public ConfigurationFile Configuration { get; set; }

		public string BaseClassType { get; set; }

		protected List<CodeMemberEvent> Events { get; private set; }

		protected List<CodeMemberField> Fields { get; private set; }

		protected List<CodeMemberProperty> Properties { get; private set; }

		protected List<CodeMemberMethod> Methods { get; private set; }

		protected AbstractClassGenerator()
		{
			Events = new List<CodeMemberEvent>();
			Fields = new List<CodeMemberField>();
			Properties = new List<CodeMemberProperty>();
			Methods = new List<CodeMemberMethod>();
		}

		public void Generate(string outputFile)
		{
			CodeCompileUnit codeUnit = new CodeCompileUnit();
			// for all using statements
			CodeNamespace globalNamespace = new CodeNamespace("");
			// for class declaration
			CodeNamespace codeNamespace = new CodeNamespace(NamespaceName);

			codeUnit.Namespaces.AddRange(new []{globalNamespace, codeNamespace});

			// add all using statements
			globalNamespace.Imports.AddRange(Configuration.Namespaces.Select(x => new CodeNamespaceImport(x)).ToArray());

			// create class
			CodeTypeDeclaration classDeclaration = new CodeTypeDeclaration(ClassName)
			{
				IsClass = true,
				IsPartial = IsPartialClass,
				TypeAttributes = TypeAttributes.Public,
			};
			if (BaseClassType != null)
			{
				classDeclaration.BaseTypes.Add(CodeGeneratorHelper.GetTypeReferenceFromName(BaseClassType));
			}
			codeNamespace.Types.Add(classDeclaration);

			classDeclaration.Members.AddRange(Events.Select(x => (CodeTypeMember)x).ToArray());
			classDeclaration.Members.AddRange(Fields.Select(x => (CodeTypeMember)x).ToArray());
			classDeclaration.Members.AddRange(Properties.Select(x => (CodeTypeMember)x).ToArray());
			classDeclaration.Members.AddRange(Methods.Select(x => (CodeTypeMember)x).ToArray());

			#region File writing

			CodeDomProvider provider = CodeDomProvider.CreateProvider("CSharp");
			CodeGeneratorOptions options = new CodeGeneratorOptions
			{
				BlankLinesBetweenMembers = true,
				BracingStyle = "C",
				IndentString = "\t"
			};

			string contentString;
			using (StringWriter stringWriter = new StringWriter())
			{
				provider.GenerateCodeFromCompileUnit(codeUnit, stringWriter, options);

				string content = stringWriter.GetStringBuilder().ToString();

				Regex commentRegex = new Regex("<auto-generated>.*</auto-generated>", RegexOptions.IgnoreCase | RegexOptions.Singleline);
				contentString = commentRegex.Replace(content, "This file was generated by binding preprocessing system for Android");
			}

			if (File.Exists(outputFile))
			{
				using (StreamReader reader = new StreamReader(outputFile))
				{
					string actualContent = reader.ReadToEnd();
					if (actualContent == contentString)
					{
						return;
					}
				}
				File.Delete(outputFile);
			}

			using (StreamWriter writer = new StreamWriter(File.OpenWrite(outputFile)))
			{
				writer.Write(contentString);
			}

			#endregion
		}
	}
}
